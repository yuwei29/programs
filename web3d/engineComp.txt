https://godotengine.org/article/dev-snapshot-godot-4-0-beta-1
The next big step: Godot 4.0 reaches Beta
By: Rémi Verschelde 15 September 2022

https://www.zhihu.com/question/27110139
开源游戏引擎 Godot Engine 使用体验如何？

作者：酒冻三尺
链接：https://www.zhihu.com/question/27110139/answer/1337458737
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

如果一定要用一句话形容他的话，那么godot重新定义了轻量级。市面有的，能做2d游戏的引擎，不论是国产的cocos，egret，强健如unity，庞大如ue，还是一些名不见经传的譬如love2d之类的，多多少少有点毛病。但是godot有点例外。这款短小精悍的游戏重新定义了轻量级。整个引擎就一个文件，50多m。下载，解压，开箱即用。这款游戏引擎3d模式不谈，2d模式适合以下这几类人：做原型，做demo，需求速度出货的即没有用过godot，也没有用过unity的自己做游戏做着玩的有一定技术实力可以搞c++的出精品2d游戏的他有一些问题会阻碍用户用它做一个商业游戏，这些问题是可选的，可以克服的：积累不够，和Unity之类的比还是差太多了。火爆的社区讨论对大陆用户来说，门槛还是有点高的。需要学习gdscrpit，虽然极度像python没什么门槛，但是直接用c++或者c#多好……技术支持不足，商业游戏作为一门工程，最怕途中遇到问题解决不了，godot官方不能保证独特的设计理念和工作流很适合小团队精品，但比较不适合大规模团队的工作=========================很多人选引擎会关心功能……其实吧，功能都是差不多的，该有的都有，没有的黑科技也大都不是必要的。3d游戏用黑科技多了组里人全都是猪队友，工程一定出问题。2d游戏就更不要谈了，除了有些连骨骼动画都没有的玩具本来就很难出现在候选者名单上以外，功能不影响，大家都一样。编辑于 2020-07-14 11:27


BACKXMQ4A
6 人赞同了该回答
不推荐从UNITY转到GODOT ，不是一个级别，不要嫌UNITY麻烦，和每天签到一次这种，其实勤奋点，那都不叫麻烦。

因为它用的是GD脚本语言，这个和JS相似，但是你相当于多学一门语言，很麻烦。当然你也可以用C#语言，但是这个版本有BUG，支持不太好，有时候你都不知道哪出错？就算你是抄官方给的例子代码也不能编译通过，我气。。。。。。

就像是捡来的女儿那样的感觉。待遇低

GODOT 在做2D游戏的时候没有粒子碰撞，骨骼IK无法用代码控制，你只能用来做动画。那样的话为什么我不会在BLENDER就做好，还非要加进GODOT再改？用IK就是希望可以用代码控制手腕做屈伸动作，居然不能实现？可见其短板。吹嘘的也就是那些所谓的2D光影光照的虚的东西，还不如把基础做好来。

另外补充一点，GODOT 不支持主机端，你想上NS就要换引擎，那样折腾来折腾去，实在D疼。或者你打算一直不上主机，那可以考虑GODOT，如果委托别的公司帮忙移植，那就老老实实交上源代码



GODOT学起来浪费很多时间，还不如拿这些时间来学习UNITY，等你完成了UNITY的功能，你对游戏的原理也理解的了个遍，我花了9个月用GODOT做出来的游戏功能，用pixel game maker 不到一周就轻松做出来了。大家比比这个效率。

编辑于 2022-04-21 05:08

MaxwellGeng
是狼，很凶，超凶嗷！
35 人赞同了该回答
简单的下载下来了解了一哈，如果没说到位各位轻喷，我的评价是“中等偏上”，好处呢和楼下题主们说的大同小异，就不重复了，总结一下就是确实好用（感受一个被Unity崩溃和UE编译整疯的开发者的心情），是真的好用。至于缺陷，在我看来最致命的问题还是体量问题，积累不够吧。

比方说处理重度逻辑运算，可以考虑研发一套类似Unity ECS + Job System这样的超高的性能，配合以高度解耦的框架，带来更好的版本迭代，协作开发体验，渲染方面应该提供一套Frame Graph或者Scriptable Rendering Pipeline这样的跨平台的底层API封装，这样在面对高级的渲染需求不会觉得无力。开放世界和大地形一直是近几年的热点，如果引擎在这些方面有所建树，不断积累工具链和编辑器扩展，想必能在开发类似游戏时提供不错的帮助。当然，这些比起技术更加趋近于积累和经验问题，还是希望这个引擎随着时间的积累，可以越做越好，逐渐变成强大的顶级引擎。

发布于 2019-01-10 03:53

221 Games
独立游戏制作人。新作《水浒豪》即将在Steam发售。
17 人赞同了该回答
新项目尝试了Godot，但在一些基础功能上居然遇到了严重的Bug，又用回了Unity。目前Godot的质量还不足以开发靠谱的商业游戏。Unity高昂的许可费，该掏还是得掏。

对于很多人称赞的Godot节点，我持反对意见。我认为Unity的场景、组件、预制体的区分，让开发者的思路更清晰。而Godot里啥啥皆节点反而容易引起混乱。

Godot现在急需改进三个方面：

减少Bug，增强稳定性。
补充缺失的重要功能。
请一位UE设计师。
现在的Godot和Unity还无法相提并论，根本就不是一个级别的对手。就像国足和巴西的差距。

很多主播在油管上不切实际的尬吹Godot令人反感。我希望Godot的负责人明白，你们拿到的奖金和赞助，是用来开发产品提升质量的，不是用来找主播打广告的。以Godot现在的质量，还远不到打广告的时候。

为什么没有游戏公司用Godot开发商业游戏？因为人家门清，不容易被忽悠。

大家可以关注Godot的发展，但不值得投入大量精力。

编辑于 2020-12-07 16:47

雨夜芭蕉
15 人赞同了该回答
看下github

bug太多，1000多个，开源主要就2个人在写代码，确实忙不过来。

写个flappy bird ，马里奥是很快。但是要做个能赚钱商业化游戏，坑很多。

这也是主流开发商不用的原因。

另外圈子小，导致tutorial，demo，plugin template都不丰富。

虽然这款引擎设计的很好，但是由于上诉缺点，在实际开发中还是没有unity快。

现在能看到的一个用途就是搞什么少儿编程培训班，哄小孩子入坑。因为确实能很快做个马里奥类的游戏。孩子家长看着都很高兴。

个人愚见，不喜勿喷。

编辑于 2019-01-13 12:07

https://www.simplilearn.com/entity-component-system-introductory-guide-article
Entity Component System: An Introductory Guide

https://www.libhunt.com/l/rust/topic/game-engine
What are some of the best open-source Game Engine projects in Rust? This list will help you:

Project	Stars
1	bevy	19,425
2	ggez	3,495
3	macroquad	1,765
4	Coffee	932
5	UnicornConsole	878
6	quicksilver	758
7	Tetra	743
8	emerald	446
9	Oxygengine	411
10	arsenal	266
11	rusty_engine	240
12	bevy_retro	216
13	Crayon	174
14	OpenGMK	137
15	scion	135
16	screen-13	98
17	rust-game-ports	95
18	name-needed	94
19	sandbox	75
20	innit	43
21	INOX	42
22	cse125-sp22-group1	34
23	storm	25

Top 23 Rust Game Engine Projects
bevy
268
 
19,425
 
9.9
 Rust
A refreshingly simple data-driven game engine built in Rust

bevyengine logo
Project mention: We Need To Talk About The Bad Sides of Go | reddit.com/r/programming | 2022-11-03
I'm mentioning this example of confusion in the bevy engine: github.com/bevyengine/bevy/discussi...

ggez
16
 
3,495
 
9.3
 Rust
Rust library to create a Good Game Easily

ggez logo
Project mention: ggez (game framework) version 0.8 is out! | reddit.com/r/rust_gamedev | 2022-10-24
In case you haven't seen the previous posts, 0.8.0 is quite a major update. We now use wgpu for the graphics backend and there's been tons of API changes. See RC1 and RC2 for the release-candidate update posts and CHANGELOG.md for the full changelog.

https://www.bilibili.com/video/BV1mP4y1f7b2

MSDimos
这玩意儿目前缺一个editor
2022-09-10 01:45
5
回复

无瑕剑客
纯手敲吗，那地图咋编辑[热]
2022-09-24 10:25
回复

MSDimos
回复 @无瑕剑客 :是的[喜极而泣]它还承担不了这么大的开发工作，godot比他完善
2022-09-24 10:46
1
回复

无瑕剑客
回复 @MSDimos : [嗑瓜子]
2022-09-24 17:37
回复

火星飞人123
可以接入godot或者ue，github有相关项目
2022-09-26 10:37
回复

https://bevyengine.org/

https://www.zhihu.com/question/39302436
你为什么不用unity引擎？
现在Unity大行其道，几乎统治国内游戏开发市场，逼迫Unreal开源，连cocos2dx都渐渐不是对手，更遑论其他小众化的开发工具了，所以想听听大家怎么说，以后开发游戏真的只能选unity了吗？如果你不使用unity做游戏，是基于什么样的考虑呢？

MaxwellGeng
是狼，很凶，超凶嗷！
177 人赞同了该回答
我不用Unity，我在Unity上自己造引擎。

Unity的人根本就不会用Unity，他们发明了SRP，结果写的HDRP效率不如我们写的MPipeline高，后处理特效(AO, SSR, TAA, Volumetric Lighting)也不如我们做的好看，扩展性也不行（只支持固定的TBDR，CBFR，很难扩展光照模型），最厉害的是，它还崩溃？！还崩溃？！你们自己写的玩意为啥会把自己的编辑器卡崩掉？

再来说DOTS，那个ECS一开始写的丑到脸都绿了，[Inject]是个什么东西能不能解释一下，面向Attribute编程的我除了在Java的Junit里见过还真没见过第二个（JUnit还是负责测试的，这个可是正规项目），然后绕了一大圈就是实现了一个自动调用的Main函数？？

引擎挺强的，就是他们自己都不会用。

发布于 2019-05-22 23:57


hanjie-zou​
被图形学锤出屎
1,573 人赞同了该回答
========== 鸽了半年的三更!!!!!! ===========
先贴一下目前这个 "用C++徒手撸的自娱自乐级" 游戏项目 的进度吧（流量注意）:

匿名用户
69 人赞同了该回答
Unity 的缺点很多, 比如 Bug 多, API 设计不优雅, 脚本系统性能差又不好用, 奇葩的组件设计, 蹩脚的输入管理......(详见吐槽) 好在其中大部分官方都表示正在或将要改进.

但是我们还是选择 Unity, 因为开发者对引擎的了解程度比起这个引擎是否完美对项目来说更加重要. 之前有考虑过 Unreal, 但谁能保证用 Unreal 就比用 Unity 开发效率更高, 质量更好呢?

如果说要选择其他引擎, 那么原因肯定是 Unity 存在对项目来说难以克服的问题. 好在目前还没遇到, 而且也有其他成功的游戏验证了 Unity (这些开发者被坑的飞起了吧).

吐槽1: Unity bug 多有目共睹, 它们一般 20 天就发个大版本, 如此快速的迭代后果就是不稳定, 经常还发生设计变更, 实在是......

吐槽2: 那个 sharedMesh 和 sharedMaterial 真是够了, 而且还有 sharedMaterials 这样的返回堆对象副本的 API......

吐槽3: 所有的事件回调都塞进 MonoBehavior, 既不好看也不好用. 官方说正在设计新的事件解决方案, 坐等.

吐槽4: 内置组件, 该序列化的数据不序列化, 比如 Rigidbody, 默认质心和惯性张量自动计算, 即使脚本访问修改了数据, 复制这个物体后, 质心和惯性张量还是自动计算的.

吐槽5: ......

再补充几个 Unity 的编辑器的坑吧:

编辑器 API 里各种裸 delegate 访问, 加个 event 不好吗, 某个程序员直接对 delegate 赋值其他人代码就全挂了;

编辑器里很多返回引用的 API, 上次看到一个插件, 那个作者直接修改编辑器风格, 自己的插件看起来正常了, Unity 的界面坏掉了;

写编辑器看起来不是很难, 难的是处理 Undo/Redo, 默认的 Undo 解决方案是针对序列化数据的, Undo/Redo 触发时 Unity 仅对序列化数据执行修改, 其他非序列化数据一概不管. 做个稍微复杂的的插件, Undo/Redo 就能烦死人了;

Editor 设计为特殊目录, 里面放 Editor 代码. 看起来很美好, 实际上很傻. 编辑器少不了要访问私有成员, 而且 Editor 代码不能被 Runtime 代码访问, 最后还是用 UNITY_EDITOR 包起来写到一起算了(有个小技巧, 使用 C# 的 partial 关键字来分离编辑器代码是个不错的选择);

谁能告诉我 Gizmos 和 OnSceneGUI 的本质区别? Gizmos 类不能在 OnSceneGUI 里使用, 但是它们明明看起来是一种东西; 而当你折叠一个组件后, 所有同类组件的 Gizmos 就看不见了......这个设计我始终不能理解......

再补充个: new GameObject 时, 这个 GO 属于哪个 Scene ? 新的 SceneManager 也没有解决这个问题.

成功游戏案例:

The Forest on SteamRepublique on Steam
Cities: Skylines on Steam
Ori and the Blind Forest on Steam
编辑于 2016-01-11 22:34

一往而深
29 人赞同了该回答
我用unity，但是出于学习规划的角度，我不愿意把自己全部捆绑在unity上面。

unity做产品相当于是使用脚本设计游戏。这基本上是想把引擎开发和游戏设计分离出来，这种分工是好的，只是我个人做产品的同时也希望学习一下引擎和基础的绘制流程。

所以我选择“用unity的同时也用裸渲染接口如vulkan做工程”。这样一旦新的某个引擎来了，我可以轻易切换过去，不会被淘汰。

而如果只会c#写业务，只会用unity这个工具，从长远利益来说是不划算的。因为新引擎可能使用的开发语言不是c#。比如unreal，那么你在unity上积累的所有源码和组件都面临由于换语言导致的翻译甚至重做。

特别提一个编码建议：无论哪种语言，尽量不用别的语言没有的特性。只使用基本的结构和函数来完成。这样这个组件可以轻易翻译成别的语言，扩大使用范围。

unity的优势：

unity的设计比cocos2d好很多，工具简单易用。出品非常快。更好的是它可以快速发布不同平台的发布包。当然，跨平台发布包和跨平台接口抽象，我要特别感谢一下cocos2d的源码给我提供的思路。

unity的劣势：

从空工程打包体积来说，安卓包单abi仅arm64，unity还是比较大的约二十兆，unreal非常大约五十兆，cocos2d约十几兆。我自己用vulkan接口可以到十兆以内。

unity的着色器使用的是自定义的一套规则，与hlsl和glsl还是有区别的，这对以后转行是个成本。

unity从工程结构来说，属于重度嵌入模式。app与os层大部分被封在引擎内部。这导致一个问题，开发或接入第三方sdk时必须单独考虑unity平台。unity与os原生接口的交互非常晦涩，比如我想调整unity在安卓平台上的输入法弹出框的行为，就有点麻烦。

自己写引擎的优点：

自己写引擎就跟集邮追剧打游戏一样。更像是一种消遣，并不会真想它哪天会直接获利。事在人为，给自己一个梦想，证明我还活着。

我用过ogre，cocos2d和unity。但是我几乎不会写着色器，也不了解与之相关的绘制流程。我只是在用工具而已。后来我用vulkan自己写一遍，真正用到了，再看文档才豁然开朗。着色器参数怎么传入，pbr理论到实现与阴影贴图，每一行着色器代码都是亲手编写，这回我应该可以说：“我会写着色器了”。

多样性能产生更多乐趣，大家都用unity做出来的东西都长那样。但是我自己做的东西却跟他们不一样。它可能很多方面不如unity，但是只要有任何一个点比别的好，它就是有趣的。

从基础开始设计一个引擎，欢迎加入：
https://blog.csdn.net/undercallfile/article/details/123173771

编辑于 2022-05-01 23:50


无良
哈哈哈
2 人赞同了该回答
godot游戏引擎使用MIT协议，也支持csharp，做2d游戏比unity合适，3d的话得看godot4(godot 3做3d并没有unity好)。就是生态没unity好。可以去了解一下这个游戏引擎

发布于 2022-05-02 10:39


https://www.zhihu.com/question/476152940
为什么米哈游在原神要用unity引擎，在这款游戏中，unity引擎相对于其他引擎有什么优势？

eechen
不妥协，不逐流。
249 人赞同了该回答
米哈游是3个上海交大研究生在2012年创办的公司,开始的时候就这么几个人,哪有人力物力去折腾复杂的Unreal,或者其他更加底层的开源游戏引擎,都是怎么快怎么来.

创始人蔡浩宇那时候还是独立游戏开发者,在用Unity3D之前,还用Flash写过游戏.

感觉蔡浩宇跟香草社创始人神谷盛治有点像,都是"糙汉一边去,爷要做美少女游戏".

米哈游应该是从2014年发布的崩坏学园2(是一个2D游戏)开始积累人气,通过2016年发布的崩坏学园3开始积累大量资本,有钱有人投入后在2020年才发布了原神.

没有3A大作的命,可别得了3A大作的病.

游戏收入的天花板应该是农药吧,还不是用Unity3D.

以大多数人的努力程度,还轮不到作品要去拼引擎上限.

编辑于 2021-08-22 02:40



知乎用户
591 人赞同了该回答
Unity的好处是，引擎本身的定制化程度低，用户可以发挥的空间就很大。

引擎没有替你设定，你要做什么样的游戏。所以你想怎么做，就可以怎么做。

无论2D还是3D，无论RPG还是飞行棋，都由开发者自己决定。

只要你脑子里出现一个玩法，大概就知道要怎么去实现。虽然代码需要琢磨，但至少大方向是非常清楚的。只要你自身编程能力够硬，就能做出任何类型的游戏。

UE的问题就是，定制化程度太高，引擎预设的模板和工具，就已经把玩法框住了。

这样做的好处是，如果你要做个FPS游戏，有配套工具可以直接使用，点点鼠标就能出效果，而且效果还不错。

因为UE本质上，就是《虚幻竞技场》的二次生成器。

既然它能生成《虚幻竞技场》，也就能生成一些跟《虚幻竞技场》玩法差不多的游戏。

比如把开枪改成释放魔法，把子弹改成火球。它就从未来战争题材，变成了古代魔幻风格。

但如果要做个《虚幻竞技场》里完全没有的玩法，就不知道该从哪下手了。

比如，如何用UE做个《三国杀》？

无论你把UE玩得再怎么精通熟练，也照样无能为力。

换个角度来说，如果Unity是PS，UE就是个大号美图秀秀。

如果修人像照片，美图秀秀比PS方便多了，不仅修的快，而且效果秒杀大多数PS选手。

用PS，既不能一键瘦脸，也不能一键隆鼻。你只能先画个选区，再用笔刷涂涂抹抹。。。。。

费时费力折腾半天，效果还常常无法令人满意。

换成美图秀秀，立刻就不同了。软件非常智能，自动就能识别哪里是鼻子，哪里是眼睛，根本不用手动画选区。

想变白，就用美肤工具。想瘦脸，就用瘦脸工具。点点鼠标，调调参数，立刻就变得美美哒。

可是，如果你要修的是一张建筑照片呢？

用PS，依然是先画个选区，依然是用笔刷手动涂涂抹抹。只要你能P鼻子，就绝对也能P桥墩子。

可换成美图秀秀，你却根本无法下手。因为打开软件，你发现并不能画选区。而只有美肤工具、瘦脸工具、隆鼻工具、酒窝工具。。。隆鼻工具认识鼻子，却不认识桥墩子。

UE和Unity的区别，差不多也是如此。

比如说，《原神》里的许愿抽卡功能。

用Unity实现，一想就知道，肯定是先写个ienumerable，在里面创建个www对象，接着写个循环，在循环里用www用来跟后端通信，并保持yield。

www每获取到一个Json字符串，就把获取到的Json转换为Model对象。

再从ienumerable外面声明一个List。把Json转换的对象一个个Add到List里面。

当List里面储存10个对象之后，就把ienumerable结束掉。这样就从服务器抽到了十个对象数据。

只要你学过Unity，你就一定能看懂我在说什么。

当然，这只是个大概，具体细节还要反复推敲。

但我至少知道，方向在哪里，该推敲什么东西？

而换成UE的话。

如果做个简单的射击逻辑，根本不需要写代码，仅凭蓝图就能实现。只要是《虚幻竞技场》里有的东西，点鼠标就能解决问题。

但做这个抽卡呢？

我要先在UE里找一遍，然后发现找不到“许愿抽卡设计器”。

接着翻开蓝图节点，又从里面挨个找了一遍，发现找不到www节点。

第一个解决方案失败了。开始启动第二个解决方案。创建一个C++项目。

可是代码还没开始写，我就被一个问题难住了。要不要继承自AGameModeBase？

毕竟这玩意是所有GameMode的基类，肯定得继承吧？

可是如果继承AGameModeBase，把API文档看一遍。。。。发现API跟通信相关的API有这些：

InitGame（初始化游戏）

PreLogin（预登录）

OnPostLogin（处理登录）等等等。。。

哎？怎么API全是和登录相关的？

但我想做的不是登录功能啊，只要手动写个连接，接收一串Json就够了。

但是。无法手动写连接啊。

啥？难道要写Socket？

可是用Socket接收到的字符串，又该如何传回UE啊？

又该把Model写在哪里啊？

Model要不要继承AGameModeBase啊？

就如照片上有一座桥。

谁能指出来，哪儿是桥的鼻子？哪儿又是桥的眼睛？

我想让桥墩变圆一点，到底该用瘦脸工具，还是隆鼻工具？

我想把桥面加厚一些，到底算丰胸，还是算翘臀？

想起上大学的时候，前任女友曾向我推荐过美图秀秀，面带骄傲的对我说：“别用PS了，那软件效果不好。我们宿舍任何一个女生，P图都比你强。我们用的是美图秀秀。”

用今天知乎常见的“标准答案”翻译一下，就是美图秀秀的渲染管线，比PS强多了。

编辑于 2022-08-11 16:53


https://www.zhihu.com/question/514530614
游戏引擎（Unity）和虚幻引擎（Unreal engine），哪一个比较容易上手呢？
开发元宇宙的技术，大家都说Unity和Unreal引擎比较普遍。不知道按您的经验、哪一个比较容易？比较快上手？


呆蛙
《靖之元：东海》作者
谢邀@原麦山丘
1 人赞同了该回答
看人。程序员更易上手unity，美工更易上手虚幻。既不会编程也不懂美术只是想弄着玩的，用rpgmaker吧。

编辑于 2022-02-03 12:46

蓝空天末
1 人赞同了该回答
我觉得unity上手容易。学习资源也多。

发布于 2022-02-03 08:03


https://www.zhihu.com/question/549698336
未来十年内，Unity和Unreal哪个更有前景? 

无名剑
渲染沙琪玛，不专业不学无术
谢邀@潇洒剑客啦啦啦
2 人赞同了该回答
前景不清楚，但是我一直用unity顺手，换过一周的UE受不了那长久的编译时长和各种耦合的逻辑，弃坑了。虽然当年C++的宏大法和一些基础知识是UE3偷学的，但终究没好出货的unity用得顺。

unity就是啥都要自己弄

UE就是要拿现成的改

个人观点是，装修房子毛坯房要比旧房改造省事。

发布于 2022-08-29 18:52


https://www.zhihu.com/question/271562223
Unity和Unreal引擎哪个更有前景，为什么？

康托耶夫
unity的wiki词条是我写的
80 人赞同了该回答
来 不说u2之争，（你也知道我是哪派的）

江湖所谓程序员用unity美术用unreal这茬，也不提



提个别的，U2在慢慢取代A2的很多软件大家有没有意识到

这两个货不论如何 依然在高速扩张，高纬打低维，实时打离线，大量A2的所谓高端功能在U2这里就是个默认选项。



你们知道我现在都不用ppt了么，甲方汇报直接拿个程序，舞台调整直接给个软件还可以调灯光参数，演示体面过人。

现在渲染都是U2直出了好么，我最近渲染都是timeline排排坐，过去泡杯咖啡回来都出图完毕了，分层渲染？为啥要分层?我出图秒出为啥要分层？

工作站？渲染群？ 为什么需要这种鬼？



你要明白U2将来就是通用的处理工具，比较苦的是A2 步步收缩，怎么都不好卖



好了 问题来了 A2是 A( ) A( )

请填空

编辑于 2018-08-27 21:27

唯心而已
莫不是Autodesk和Adobe？

2018-08-27
​31
康托耶夫
康托耶夫
作者
嘘.....

2018-08-27



人形bug制造机
bug制造机
54 人赞同了该回答
看题主所说的前景是什么意思了。

易用性的话，unity完爆ue。听着是完爆。听我把话说完。

ue阔以随意培训两个月，整出一程序都写不好，任何事情都是插件解决，一个插件不行买两个，却说自己是游戏程序员的渣渣吗？

ue阔以拉低业界平均水平，到一年开头五百多家手游公司，年末死一半吗？

ue阔以让c++，shader都写不来的人两年不到当游戏客户端主程吗？

这都是unity的战绩呀。

看，unity叼到了是个思维健全的人就可以做游戏的地步。是个公司就可以是游戏公司的地步。ue可以吗？

unity不止赢在易用性，也成功在商业模式上。

发现没有，unity商业模式也像天朝的免费游戏，小白用户基数大，把那些3A游戏开发商逼得口水直流。

unity像不像最早免费的某款杀毒软件？

unity开发快，人好招，符合不符合国情？

ue就像现在的3A游戏，看到成本低如狗的垃圾游戏都比自己赚钱，也想来一把game as service，做游戏做服务，一个游戏想运营一万年。

unity自身前景当然是无限宏大咯。逼死了ce，下一步自然是ue赶下神坛，想着自己的半壁江山，那才是前景。

毕竟渲染，无缝地图加载这些都还没有k过ue，当不了大哥大。

而且在游民星空口碑不好，拜自己太好用吸引垃圾开发者太多，坏了口碑。

ue呢，本身就是大哥大。unity逼它屈身之前，有几个小公司的开发的见过真面目？

编辑器一大堆，材质啦，节点连线什么的。

( 我记得我工作三年的时候，被一个刚毕业的程序教导我说ue不行，里面东西华而不实。我竟无言以对。

想来也对，你看垃圾公司哪里去找美术会连线的。那里的程序没听都没听过技术美术，技术策划，毕竟xml和Excel才是行业未来。什么事情缺了程序参与，总觉得不对。)

ue发展前景也就是保住王位顺带弄个手游开发。要不是unity那么不要脸，ue也不用闹得个开源免费。

当然，我觉得题主要问的是学习前景。

如果不打算进大厂，找个垃圾公司工作，在中国，unity不二选择。

想做点独立游戏，有点志向，unity也不差。有点工作经验团队，慢慢有考虑ue的了。

如果是没有游戏开发经验的程序员，建议unity，毕竟很快上手，而且游戏方方面面都有涉及，学会了学ue，不难。

想做技术美术，技术关卡策划，做3A游戏美术，都建议ue，毕竟这种职位要会材质编辑这些，只会unity会被人嘲笑的。不说插件，说内置的。

如果是新手程序想学游戏开发，在学校里的，推荐ue，或者任何c++的组合引擎，ogre加bullet。时间多，基础打好更重要。

( 我现在工作的公司，人事招人的时候，听说你只会unity，就会警戒起来 。大厂更看重通用的经验。)

如果是个老手经验丰富的，那就不该问这个问题，哪款更适合自己，那么大年纪了心里没点b数吗？

发布于 2018-09-04 09:01


作者：我不是小学生1号
链接：https://www.zhihu.com/question/271562223/answer/2727964748
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

Unity在移动平台上优势非常大，大厂、小厂都在用，这就代表就业机会多。Unity现在不仅仅局限在游戏领域。虚拟现实，工业、医疗、App都有越来越多的厂商开始或正在使用，大部分是代替了现实去做虚拟化的模拟演练。因此即使跨出游戏这个行业，这个技能也是能找到用处的。这里澄清一个误区，UE和unity的画质并没有什么区别，不存在UE比unity画质好。之所以会有这样的误区，是因为UE的默认渲染管线是deffered（只能pc主机以及少数高端手机能跑的渲染模式），高级后效全开，unity默认管线是forward（最简单的渲染模式，但是所有手机都能跑），未开任何后效全素颜。U3D优劣：U3D侧重轻量级的开发，更偏向于移动端，在手游方面是非常强的，大概有80%的手游都是使用U3D开发的；U3D自由度比较高，跨平台是最好的几乎支持所有主流平台，可以充分发挥开发者的想法和思路去做创意类型的游戏；U3D更支持VR、AR相关应用的开发；U3D支持的编程语言是C#，学习成本更低；U3D引擎源代码不公开；UE4优劣：UE4适合重量级开发，更侧重于PC，端游以及高端手游，对于中低端手机兼容性略差（UE4引擎在不断的更新后，对移动端优化已经变得非常友好了；目前国内各游戏公司在列已研发/待研发的游戏中使用UE4引擎的手游越来越多）；UE4渲染效果一流，用户体验更好；UE4引擎源代码开源；UE4支持蓝图、C++，学习成本更高；ue难招人。c++本来就比c#难很多，人也贵很多。再加上unity门槛低，市场上养了大量的unity熟练工不过随着近几年腾讯带头推ue，各个大厂包括米哈游都有ue在研项目，ue引擎的性能上限的确比unity强很多，ue人才也越来越多。如果您仍然感到有些迷茫，您可以来听一下这节课，这节课里面比较详细的介绍了，游戏行业的动向，各个游戏类型的发展现状，链接在下面有兴趣可以看一看游戏开发入门学习交流课​work.weixin.qq.com/kfid/kfc71b08bf74400f712​work.weixin.qq.com/kfid/kfc71b08bf74400f712发布于 2022-10-24 11:30


https://www.zhihu.com/question/336750450 
Unity、Unreal、CryEngine这三个引擎各有什么特点？哪一种最适合用来开发大型3D网游？ 

匿名用户
5 人赞同了该回答
CryEngine 引擎没有使用过。

UE4 和 Unity 使用过一点，这两个引擎分别给我的印象是：UE4 虽然是开源，但却给了我一种独裁制度影子；Unity 虽然不是开源的，但却给我一种民主制度的影子。

可能你会觉得很别扭，但这就我的感觉。

发布于 2019-09-04 09:57



https://www.zhihu.com/question/516124132
Godot这个开源游戏引擎的能力如何，和Unity和Unreal等主流引擎相比主要有哪些不足？

兔老板AirS​​
作曲等 3 个话题下的优秀答主
167 人赞同了该回答
自己的项目业余开发一年半了，在unity和godot上各跑着一份工程，近段时间也升级到了4.0beta，分享一点经验。

godot本身的扩展性和兼容性都算友好，毕竟能看源码。但这个友好是对C++熟练的资深程序来说的，属于一般不踩坑，踩坑就是深坑的那种，需要一点自学能力才能解决。

就这个月的事，godot4 beta出了。有了.net6加持，直接起飞，目前的C#支持甚至强过unity。http://System.IO的性能提升肉眼可见，而且能直装nuget，很方便，加dll扩展库也就是改个csproj的事。可以认为这个月新出的godot4，对于小团队/个人做C#开发已经是非常友好的引擎了。

至于自带的GDscript，语法类似Python，优点是易学，和引擎结合紧密，能快速出原型，但功能和性能相比背靠强大微软的C#并不占优势。

好在现在GDscript也开始渐渐支持静态类型声明，4正式版里性能应该会好很多。

学习难度上，godot的教程和资料很少，几乎只能查API。

隔壁unity虽然教程众多，但组件更新太快，比如搞个UI你能看到NGUI，UGUI，和最新的UI toolkit三套不同的教程，很混乱。

但总的来说，不是自学能力异于常人或者有C++经验能靠源码排雷的开发者，还是建议老实用unity。unity纵然有这样那样的毛病，但凭借网上海量的前人经验，你能在最短的时间内排完雷并进入实际游戏内容开发。如果你会花费很多时间去做UI，骨骼动画，碰撞之类的基础轮子，而编写实际游戏逻辑的时间很少，那unity一定有更现成的成熟解决方案等着。比如想打磨一个精细美观的UI，那还是UGUI配上各种插件好用。

但如果你要做的是抄都没地方抄的天马行空想法（比如baba is you，braid这种），反正少不了折腾，那倒是建议上godot，出原型试错迭代要快很多。

项目架构上，unity的scene和prefab，放到godot里都统一成了场景（scene），实际逻辑区别不大。比较独特的点是，godot设计了一套信号（signal）系统，相当于每个node默认带一大堆委托，在触发一些UI响应事件时比较方便。unity虽然也有类似的EventSystem，但便利性差点意思。

至于官方所说的没有全局变量，鼓励用autoload加载脚本配合单例模式……其实只是针对GDscript而言。用C#的话，static字段并不受影响。

另外，godot4现在偶尔闪退，3.5还算稳定。

总之，godot是个好引擎，而且开源免费，难能可贵，而且未来可期。

但也要稍微泼一点冷水，新入行的开发者们并不要看到油管上一些godot vs unity的视频就觉得godot比unity更方便，真正做一个完整的项目开发时，那点“方便”省不了太多时间，多踩个坑就都补回来了。

官方教程演示里一直在鼓励所见即所得的开发模式，说白了就是让所有面向对象的类都继承node做成可视化，并把这个类所有的数据和方法都写在node脚本里。这个理念导致做一个功能原型特别快，但真的把这些功能拼成一个游戏时，可能会面临着更多的bug，代码易读性降低，甚至重构。

这些演示，展示的并不是godot引擎的优点，而是设计模式的特点（当然也伴随着缺点）。这样的理念做一个横版恶魔城类，或是星露谷，火纹这类基于像素tilemap的游戏没问题，但总体来看godot适用面还是比unity略窄那么一点点。

当然不是说什么类型unity能做godot就不能做，游戏引擎说白了只是个图形/声音/输入接口，能做什么关键看人。但万一官方有什么轮子功能不全，或是bug没解决，那就麻烦很多。毕竟godot市面上的成品不够多，steam上卖得好的也就一个《文字游戏》，还没经过大量实际开发作品的验证。

当然官方轮子有欠缺可以自己搓，但要是什么都自己搓，那要游戏引擎干嘛。开发者毕竟是内容生产者，时间宝贵，没必要花太多精力搓那些玩家感受不到的，非游戏内容的东西。



至于我自己做沙盒策略的，为什么最后比较下选择了godot？因为这项目是后台演算为主，对引擎的利用也就是搓个UI，所以只要引擎别出幺蛾子用什么都行；另一方面因为开源+未来可期，以及.net6实在是太香了，对数据密集型的任务很友好。

搬个网图：


还有，unity竟然开始弹广告了。



简单总结：

2D小成本，以创意迭代和快速做完为优先，godot有优势。

中等成本的主流玩法作品，要拼作品卖相细节，用unity。

啥都不会，就想入个门体验一下，可以来玩godot3.5和GDscript。

（以上都是练习时长不到两年半的菜鸡发言，如有不妥欢迎指正。）

发布于 2022-09-25 16:34・IP 属地湖南


https://www.zhihu.com/question/450296991
不考虑功能和性能，只比较软件使用体验或者开发体验，Unity和Unreal-Engine谁更优秀？
另外，会不会还有使用体验更好的引擎？


知乎用户
4 人赞同了该回答
从我个人的使用感受来说，Unity的开发使用体验是超过UE4很多很多的，Unity的编辑器更清晰更简洁；Unity使用的C#语言比UE4的蓝图更清晰更适合交流更方便版本管理，比UE4的C++更简单编译也更快；Unity直接写Shader代码比UE4方便；Unity的插件比UE4更丰富；Unity项目的代码组织比UE4更简单明了。其中的很多问题可以归结到UE4渗透到各个角落的节点化编程系统，包括蓝图、材质编辑器、Niagara等，我觉得非常难用，虽然很多非程序员很喜欢。

然而，我们团队用的正是UE4……

编辑于 2021-04-12 22:57


https://www.zhihu.com/question/270822932
Unity 3D 和 Unreal（虚幻引擎）哪个更有前景？

Coresi7​​
腾讯科技（深圳）有限公司 游戏客户端开发
8 人赞同了该回答
先结论，两个都很有前景（UE4看起来前景好一些）

Unity源代码我有一份，有的时候看他们的开发模式简直是感人，感觉他们要不是有什么颠覆的话，只能他们闭源玩玩，开源什么的就算了（用的超级老的VC++库，配置繁琐，用的超级老的没有人维护的工具等）

但是UE4开源社区发展的有声有色，感觉很有希望。别小瞧了开源开发者，他们有很多大神的。

但是手游，尤其是商业化游戏，Unity目前暂时是碾压态势，这方面UE4相对就比较疲软一些，而且这个过程目测还要持续相当长一段时间。UE4不论是开发敏捷度，开发效率，编译效率和安装包大小和Unity相比会差很多。不过这样带来的好处显而易见，就是画面做得很好，而且为了提升画面带来的开销也较小。通常那种堆钱堆量堆美术对包大小不敏感的游戏，使用UE4很合适。

UE4精通的人较少，有UE4背景而且精通C++的人员很紧俏，不过这个要求相比熟练掌握Unity和C#苛刻太多。



最后

国内绝大多数团队做的那点工作远没有到拼引擎的地步。所以两个引擎选哪个都行，都很有前景。

编辑于 2018-12-13 19:35



---------------------
安装unity的时候发现
unity 包含 cudnn 组成部分